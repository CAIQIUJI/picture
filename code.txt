#include <iostream>
#include <fstream>
#include <vector>
#include <string>

void writeToFile(const std::string& filename, const std::vector<std::string>& data, size_t bufferSize) {
    std::ofstream dataFile(filename, std::ios::out | std::ios::binary);
    
    if (!dataFile) {
        std::cerr << "Failed to open file: " << filename << std::endl;
        return;
    }

    std::vector<std::string> buffer;
    buffer.reserve(bufferSize);

    for (const auto& line : data) {
        buffer.push_back(line);

        // If the buffer is full, write its contents to the file
        if (buffer.size() >= bufferSize) {
            for (const auto& bufferedLine : buffer) {
                dataFile << bufferedLine << "\n";
            }
            buffer.clear();  // Clear the buffer after writing
        }
    }

    // Write any remaining data in the buffer to the file
    if (!buffer.empty()) {
        for (const auto& bufferedLine : buffer) {
            dataFile << bufferedLine << "\n";
        }
    }

    dataFile.close();
}

int main() {
    std::vector<std::string> data = {
        "Line 1",
        "Line 2",
        "Line 3",
        "Line 4",
        "Line 5",
        "Line 6",
        "Line 7",
        "Line 8",
        "Line 9",
        "Line 10"
    };

    std::string filename = "output.txt";
    size_t bufferSize = 3; // Set the buffer size according to your needs

    writeToFile(filename, data, bufferSize);

    return 0;
}








#include <iostream>
#include <fstream>
#include <vector>
#include <thread>
#include <mutex>
#include <atomic>
#include <cmath>

std::mutex progressMutex;
std::atomic<size_t> totalProcessedBytes(0);
size_t totalBytes = 0;
size_t lastProgress = 0;

void processFileChunk(std::ifstream& file, size_t start, size_t end) {
    file.seekg(start);
    std::string line;
    size_t localProcessedBytes = 0;

    while (file.tellg() < end && std::getline(file, line)) {
        // Simulate data processing
        // std::this_thread::sleep_for(std::chrono::milliseconds(10)); // Uncomment to simulate processing time

        localProcessedBytes += line.size() + 1; // +1 for newline character

        // Update global processed bytes count
        totalProcessedBytes.fetch_add(line.size() + 1, std::memory_order_relaxed);
    }
}

void reportProgress(size_t previousProgress) {
    size_t currentProgress = static_cast<size_t>(100.0 * totalProcessedBytes / totalBytes);
    if (currentProgress - previousProgress >= 1) {
        std::cout << "Progress: " << currentProgress << "%" << std::endl;
    }
}

void processFile(const std::string& filename, size_t numThreads) {
    std::ifstream file(filename, std::ios::binary | std::ios::ate);
    if (!file) {
        std::cerr << "Failed to open file: " << filename << std::endl;
        return;
    }

    totalBytes = file.tellg();
    file.seekg(0);

    std::vector<std::thread> threads;
    size_t chunkSize = totalBytes / numThreads;

    for (size_t i = 0; i < numThreads; ++i) {
        size_t start = i * chunkSize;
        size_t end = (i == numThreads - 1) ? totalBytes : start + chunkSize;

        threads.emplace_back([&file, start, end]() {
            std::ifstream chunkFile(filename, std::ios::binary);
            processFileChunk(chunkFile, start, end);
        });
    }

    // Join all threads
    for (auto& t : threads) {
        t.join();
    }

    // Report final progress
    reportProgress(lastProgress);
}

int main() {
    std::string filename = "data.txt";
    size_t numThreads = 4; // Number of threads to use

    processFile(filename, numThreads);

    return 0;
}
计算文件总大小：

使用 std::ifstream 打开文件并获取其总字节数 (totalBytes)。这将用于计算进度百分比。
处理文件块：

processFileChunk 函数处理文件的一部分。它根据起始和结束位置来处理文件中的数据。
每处理一行，更新 totalProcessedBytes 以跟踪总的已处理字节数。
更新进度：

reportProgress 函数计算并输出进度信息。只有当进度增加了至少 1% 时才输出。
创建和管理线程：

在 processFile 函数中，文件被分割成多个块，每个线程处理一个块。
线程在 processFileChunk 函数中处理数据块。
主线程：

创建线程来处理文件的不同部分，并在所有线程完成后报告最终进度。


	


#include <iostream>
#include <fstream>
#include <vector>
#include <thread>
#include <mutex>
#include <atomic>
#include <chrono>

// Global variables
std::mutex progressMutex;
std::atomic<size_t> totalProcessedBytes(0); // To keep track of the total bytes processed
size_t totalBytes = 0; // Total size of the file in bytes

void processFileChunk(const std::string& filename, size_t start, size_t end) {
    std::ifstream file(filename, std::ios::binary);
    if (!file) {
        std::cerr << "Failed to open file: " << filename << std::endl;
        return;
    }

    file.seekg(start);

    char buffer[4096]; // Buffer for reading chunks of data
    size_t localProcessedBytes = 0;

    while (file.tellg() < end) {
        file.read(buffer, sizeof(buffer));
        std::streamsize bytesRead = file.gcount();
        localProcessedBytes += bytesRead;

        // Update global processed bytes count
        totalProcessedBytes.fetch_add(bytesRead, std::memory_order_relaxed);
    }

    file.close();
}

void reportProgress(size_t previousProgress) {
    size_t currentProgress = static_cast<size_t>(100.0 * totalProcessedBytes / totalBytes);
    if (currentProgress - previousProgress >= 1) {
        std::cout << "Progress: " << currentProgress << "%" << std::endl;
    }
}

void processFile(const std::string& filename, size_t numThreads) {
    std::ifstream file(filename, std::ios::binary | std::ios::ate);
    if (!file) {
        std::cerr << "Failed to open file: " << filename << std::endl;
        return;
    }

    totalBytes = file.tellg();
    file.seekg(0);

    std::vector<std::thread> threads;
    size_t chunkSize = totalBytes / numThreads;

    for (size_t i = 0; i < numThreads; ++i) {
        size_t start = i * chunkSize;
        size_t end = (i == numThreads - 1) ? totalBytes : start + chunkSize;

        threads.emplace_back(processFileChunk, filename, start, end);
    }

    // Report progress every 100ms
    size_t lastProgress = 0;
    while (totalProcessedBytes < totalBytes) {
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
        reportProgress(lastProgress);
        lastProgress = static_cast<size_t>(100.0 * totalProcessedBytes / totalBytes);
    }

    // Ensure the final progress is reported
    reportProgress(lastProgress);

    // Join all threads
    for (auto& t : threads) {
        t.join();
    }
}

int main() {
    std::string filename = "data.txt";
    size_t numThreads = 4; // Number of threads to use

    processFile(filename, numThreads);

    return 0;
}
文件处理：

processFileChunk 函数负责处理文件的一部分。它使用一个缓冲区来读取文件数据，并在读取过程中更新 totalProcessedBytes。
进度报告：

reportProgress 函数计算并输出当前进度百分比。进度报告每次增加至少 1% 时才会输出。
线程管理：

在 processFile 函数中，文件被分成多个块，并用线程并行处理这些块。
主线程进度监控：

主线程定期检查总的处理字节数，并报告进度。它会每 100 毫秒检查一次，并更新进度信息。
最终进度报告：

在所有线程完成后，确保报告最终的进度信息。